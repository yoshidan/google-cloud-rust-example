// DON'T EDIT. this code is generated by nene.
use google_cloud_googleapis::spanner::v1::Mutation;
use google_cloud_spanner::key::Key;
use google_cloud_spanner::mutation::{
    delete, insert_or_update_struct, insert_struct, replace_struct, update_struct,
};
use google_cloud_spanner::row::{Error as RowError, Row, Struct, TryFromStruct};
use google_cloud_spanner::statement::{Kinds, ToKind, ToStruct, Types};
use google_cloud_spanner::value::CommitTimestamp;
use std::convert::TryFrom;

pub const TABLE_NAME: &str = "UserItem";
pub const COLUMN_USER_ID: &str = "UserId";
pub const COLUMN_ITEM_ID: &str = "ItemId";
pub const COLUMN_QUANTITY: &str = "Quantity";
pub const COLUMN_UPDATED_AT: &str = "UpdatedAt";

pub struct UserItem {
    pub user_id: String,
    pub item_id: i64,
    pub quantity: i64,
    pub updated_at: chrono::DateTime<chrono::Utc>,
}

impl UserItem {
    pub fn insert(&self) -> Mutation {
        insert_struct(TABLE_NAME, &self)
    }

    pub fn update(&self) -> Mutation {
        update_struct(TABLE_NAME, &self)
    }

    pub fn replace(&self) -> Mutation {
        replace_struct(TABLE_NAME, &self)
    }

    pub fn insert_or_update(&self) -> Mutation {
        insert_or_update_struct(TABLE_NAME, &self)
    }

    pub fn delete(&self) -> Mutation {
        delete(TABLE_NAME, Key::composite(&[&self.user_id, &self.item_id]))
    }
}

impl ToStruct for UserItem {
    fn to_kinds(&self) -> Kinds {
        vec![
            (COLUMN_USER_ID, self.user_id.to_kind()),
            (COLUMN_ITEM_ID, self.item_id.to_kind()),
            (COLUMN_QUANTITY, self.quantity.to_kind()),
            (COLUMN_UPDATED_AT, CommitTimestamp::new().to_kind()),
        ]
    }

    fn get_types() -> Types {
        vec![
            (COLUMN_USER_ID, String::get_type()),
            (COLUMN_ITEM_ID, i64::get_type()),
            (COLUMN_QUANTITY, i64::get_type()),
            (COLUMN_UPDATED_AT, CommitTimestamp::get_type()),
        ]
    }
}

impl TryFromStruct for UserItem {
    fn try_from(s: Struct<'_>) -> Result<Self, RowError> {
        Ok(UserItem {
            user_id: s.column_by_name(COLUMN_USER_ID)?,
            item_id: s.column_by_name(COLUMN_ITEM_ID)?,
            quantity: s.column_by_name(COLUMN_QUANTITY)?,
            updated_at: s.column_by_name(COLUMN_UPDATED_AT)?,
        })
    }
}

impl TryFrom<Row> for UserItem {
    type Error = RowError;
    fn try_from(row: Row) -> Result<Self, RowError> {
        Ok(UserItem {
            user_id: row.column_by_name(COLUMN_USER_ID)?,
            item_id: row.column_by_name(COLUMN_ITEM_ID)?,
            quantity: row.column_by_name(COLUMN_QUANTITY)?,
            updated_at: row.column_by_name(COLUMN_UPDATED_AT)?,
        })
    }
}
