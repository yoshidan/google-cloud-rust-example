// DON'T EDIT. this code is generated by nene.
use google_cloud_spanner::row::{Error as RowError, Struct, TryFromStruct, Row};
use google_cloud_spanner::statement::{Kinds, ToKind, ToStruct, Types};
use google_cloud_spanner::mutation::{insert_struct, update_struct, replace_struct, insert_or_update_struct, delete};
use google_cloud_spanner::value::CommitTimestamp;
use google_cloud_spanner::key::Key;
use google_cloud_googleapis::spanner::v1::Mutation;
use std::convert::TryFrom;

pub const TABLE_NAME : &str = "UserCharacter";
pub const COLUMN_USER_ID : &str = "UserId";
pub const COLUMN_CHARACTER_ID : &str = "CharacterId";
pub const COLUMN_LEVEL : &str = "Level";
pub const COLUMN_ACQUIRED_AT : &str = "AcquiredAt";
pub const COLUMN_UPDATED_AT : &str = "UpdatedAt";

pub struct UserCharacter {
    pub user_id: String,
    pub character_id: i64,
    pub level: i64,
    pub acquired_at: chrono::DateTime<chrono::Utc>,
    pub updated_at: chrono::DateTime<chrono::Utc>,
}

impl UserCharacter {
    pub fn insert(&self) -> Mutation {
        insert_struct(TABLE_NAME, &self)
    }

    pub fn update(&self) -> Mutation {
        update_struct(TABLE_NAME, &self)
    }

    pub fn replace(&self) -> Mutation {
        replace_struct(TABLE_NAME, &self)
    }

    pub fn insert_or_update(&self) -> Mutation {
        insert_or_update_struct(TABLE_NAME, &self)
    }

    pub fn delete(&self) -> Mutation {
        delete(TABLE_NAME, Key::composite(&[&self.user_id, &self.character_id]))
    }
}

impl ToStruct for UserCharacter {
    fn to_kinds(&self) -> Kinds {
        vec![
            (COLUMN_USER_ID, self.user_id.to_kind()),
            (COLUMN_CHARACTER_ID, self.character_id.to_kind()),
            (COLUMN_LEVEL, self.level.to_kind()),
            (COLUMN_ACQUIRED_AT, self.acquired_at.to_kind()),
            (COLUMN_UPDATED_AT, CommitTimestamp::new().to_kind()),
        ]
    }

    fn get_types() -> Types {
        vec![
            (COLUMN_USER_ID, String::get_type()),
            (COLUMN_CHARACTER_ID, i64::get_type()),
            (COLUMN_LEVEL, i64::get_type()),
            (COLUMN_ACQUIRED_AT, chrono::DateTime::<chrono::Utc>::get_type()),
            (COLUMN_UPDATED_AT, CommitTimestamp::get_type()),
        ]
    }
}

impl TryFromStruct for UserCharacter {
    fn try_from(s: Struct<'_>) -> Result<Self, RowError> {
        Ok(UserCharacter {
            user_id: s.column_by_name(COLUMN_USER_ID)?,
            character_id: s.column_by_name(COLUMN_CHARACTER_ID)?,
            level: s.column_by_name(COLUMN_LEVEL)?,
            acquired_at: s.column_by_name(COLUMN_ACQUIRED_AT)?,
            updated_at: s.column_by_name(COLUMN_UPDATED_AT)?,
        })
    }
}

impl TryFrom<Row> for UserCharacter {
    type Error = RowError;
    fn try_from(row: Row) -> Result<Self, RowError> {
        Ok(UserCharacter {
            user_id: row.column_by_name(COLUMN_USER_ID)?,
            character_id: row.column_by_name(COLUMN_CHARACTER_ID)?,
            level: row.column_by_name(COLUMN_LEVEL)?,
            acquired_at: row.column_by_name(COLUMN_ACQUIRED_AT)?,
            updated_at: row.column_by_name(COLUMN_UPDATED_AT)?,
        })
    }
}

